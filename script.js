// ============================ // VitalBoost App Manager // ============================ class VitalBoostApp { constructor() { this.imageCarousel = null; this.doctorFeature = null; this.runnerFeature = null; this.checkUpModal = null; this.init(); } init() { document.addEventListener('DOMContentLoaded', () => { this.initVisitorCounter(); this.initImageCarousel(); this.initDoctorFeature(); this.initRunnerFeature(); this.initCheckUpModal(); this.initHeroEffects(); }); } // ============================ // Visitor Counter // ============================ initVisitorCounter() { let count = localStorage.getItem("visitorCount") || 0; count++; localStorage.setItem("visitorCount", count); const counterElement = document.getElementById("counterNumber"); if (counterElement) { this.animateCounter(counterElement, 0, count, 2000); } } animateCounter(element, start, end, duration) { const startTime = performance.now(); const animate = (currentTime) => { const elapsed = currentTime - startTime; const progress = Math.min(elapsed / duration, 1); const current = Math.floor(start + (end - start) * this.easeOutCubic(progress)); element.textContent = current; if (progress < 1) { requestAnimationFrame(animate); } }; requestAnimationFrame(animate); } easeOutCubic(t) { return 1 - Math.pow(1 - t, 3); } // ============================ // Image Carousel // ============================ initImageCarousel() { const slides = document.querySelectorAll('.image-slide'); if (slides.length === 0) return; let currentIndex = 0; const rotateSlides = () => { slides.forEach((slide, index) => { slide.classList.remove('active', 'next'); if (index === currentIndex) { slide.classList.add('active'); } else if (index === (currentIndex + 1) % slides.length) { slide.classList.add('next'); } }); currentIndex = (currentIndex + 1) % slides.length; }; // Start carousel rotateSlides(); setInterval(rotateSlides, 5000); } // ============================ // Doctor Feature // ============================ initDoctorFeature() { const doctorAvatar = document.getElementById('doctorAvatar'); const miniStatsContainer = document.getElementById('miniStatsContainer'); const checkupButton = document.getElementById('checkupButton'); if (!doctorAvatar || !miniStatsContainer) return; let isStatsVisible = false; // Doctor avatar click handler doctorAvatar.addEventListener('click', () => { isStatsVisible = !isStatsVisible; if (isStatsVisible) { miniStatsContainer.classList.add('active'); doctorAvatar.style.transform = 'scale(0.8)'; this.createSparkleEffect(doctorAvatar); } else { miniStatsContainer.classList.remove('active'); doctorAvatar.style.transform = 'scale(1)'; } }); // Hide stats when clicking outside document.addEventListener('click', (e) => { if (!doctorAvatar.contains(e.target) && !miniStatsContainer.contains(e.target)) { if (isStatsVisible) { miniStatsContainer.classList.remove('active'); doctorAvatar.style.transform = 'scale(1)'; isStatsVisible = false; } } }); // Mini stat card interactions const miniCards = miniStatsContainer.querySelectorAll('.mini-stat-card'); miniCards.forEach(card => { card.addEventListener('click', (e) => { e.stopPropagation(); this.highlightMiniCard(card); }); }); } createSparkleEffect(element) { const sparkles = 8; const rect = element.getBoundingClientRect(); for (let i = 0; i < sparkles; i++) { const sparkle = document.createElement('div'); sparkle.style.position = 'fixed'; sparkle.style.left = rect.left + rect.width / 2 + 'px'; sparkle.style.top = rect.top + rect.height / 2 + 'px'; sparkle.style.width = '4px'; sparkle.style.height = '4px'; sparkle.style.background = '#10b981'; sparkle.style.borderRadius = '50%'; sparkle.style.pointerEvents = 'none'; sparkle.style.zIndex = '9999'; const angle = (i / sparkles) * Math.PI * 2; const distance = 50; const endX = Math.cos(angle) * distance; const endY = Math.sin(angle) * distance; sparkle.animate([ { transform: 'translate(-50%, -50%) scale(0)', opacity: 1 }, { transform: translate(calc(-50% + ${endX}px), calc(-50% + ${endY}px)) scale(1), opacity: 0 } ], { duration: 800, easing: 'ease-out' }).onfinish = () => sparkle.remove(); document.body.appendChild(sparkle); } } highlightMiniCard(card) { // Remove highlight from other cards document.querySelectorAll('.mini-stat-card').forEach(c => { c.style.background = 'rgba(255, 255, 255, 0.15)'; }); // Highlight selected card card.style.background = 'rgba(16, 185, 129, 0.3)'; // Add pulse animation card.style.animation = 'none'; setTimeout(() => { card.style.animation = 'pulse 0.6s ease-in-out'; }, 10); } // ============================ // Runner Feature // ============================ initRunnerFeature() { const runnerAvatar = document.getElementById('runnerAvatar'); const runnerContent = document.getElementById('runnerContent'); const counterDisplay = document.getElementById('counterDisplay'); if (!runnerAvatar || !runnerContent || !counterDisplay) return; let isContentVisible = false; runnerAvatar.addEventListener('click', () => { if (!isContentVisible) { runnerContent.classList.add('active'); runnerAvatar.style.transform = 'scale(0.8)'; // Animate counter const targetValue = Math.floor(Math.random() * 301) + 200; // 200-500 this.animateCounter(counterDisplay, 0, targetValue, 2000); // Add running effect this.addRunningEffect(runnerAvatar); isContentVisible = true; } else { runnerContent.classList.remove('active'); runnerAvatar.style.transform = 'scale(1)'; counterDisplay.textContent = '0'; isContentVisible = false; } }); } addRunningEffect(element) { const trail = document.createElement('div'); trail.style.position = 'absolute'; trail.style.top = '50%'; trail.style.left = '50%'; trail.style.width = '100%'; trail.style.height = '100%'; trail.style.background = 'radial-gradient(circle, rgba(59, 130, 246, 0.3) 0%, transparent 70%)'; trail.style.borderRadius = '50%'; trail.style.transform = 'translate(-50%, -50%)'; trail.style.pointerEvents = 'none'; trail.style.zIndex = '-1'; element.appendChild(trail); trail.animate([ { transform: 'translate(-50%, -50%) scale(1)', opacity: 0.8 }, { transform: 'translate(-50%, -50%) scale(2)', opacity: 0 } ], { duration: 1000, easing: 'ease-out' }).onfinish = () => trail.remove(); } // ============================ // CheckUp Modal // ============================ initCheckUpModal() { const checkupButton = document.getElementById('checkupButton'); const modal = document.getElementById('doctorModal'); const closeButton = document.getElementById('modalClose'); if (!checkupButton || !modal || !closeButton) return; // Open modal checkupButton.addEventListener('click', () => { modal.classList.add('active'); document.body.style.overflow = 'hidden'; this.animateModalStats(); this.createConfetti(); }); // Close modal closeButton.addEventListener('click', () => { this.closeModal(); }); // Close on overlay click modal.addEventListener('click', (e) => { if (e.target === modal) { this.closeModal(); } }); // Close on escape key document.addEventListener('keydown', (e) => { if (e.key === 'Escape' && modal.classList.contains('active')) { this.closeModal(); } }); } closeModal() { const modal = document.getElementById('doctorModal'); modal.classList.remove('active'); document.body.style.overflow = 'auto'; // Reset stat cards const statCards = modal.querySelectorAll('.stat-card'); statCards.forEach(card => { card.classList.remove('animate'); card.style.transform = 'translateY(50px) scale(0.8)'; card.style.opacity = '0'; }); } animateModalStats() { const statCards = document.querySelectorAll('.stat-card'); const stats = { heart: { value: Math.floor(Math.random() * 40) + 60, max: 100, color: '#ff6b6b' }, stress: { value: Math.floor(Math.random() * 30) + 20, max: 100, color: '#feca57' }, energy: { value: Math.floor(Math.random() * 30) + 70, max: 100, color: '#10b981' }, sleep: { value: Math.floor(Math.random() * 3) + 7, max: 10, color: '#3b82f6' } }; statCards.forEach((card, index) => { setTimeout(() => { card.classList.add('animate'); const statType = card.dataset.stat; const stat = stats[statType]; const progressValue = card.querySelector('.progress-value'); const progressCircle = card.querySelector('.progress-ring-circle'); if (progressValue && progressCircle && stat) { // Animate progress value this.animateCounter(progressValue, 0, stat.value, 1500); // Animate progress circle const circumference = 2 * Math.PI * 36; const progress = (stat.value / stat.max) * circumference; setTimeout(() => { progressCircle.style.strokeDashoffset = circumference - progress; progressCircle.style.stroke = stat.color; }, 200); } }, index * 150); }); } createConfetti() { const container = document.getElementById('confettiContainer'); if (!container) return; const colors = ['#ff6b6b', '#feca57', '#10b981', '#3b82f6', '#8b5cf6']; const confettiCount = 50; for (let i = 0; i < confettiCount; i++) { const confetti = document.createElement('div'); confetti.className = 'confetti-piece'; confetti.style.left = Math.random() * 100 + '%'; confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)]; confetti.style.animationDelay = Math.random() * 2 + 's'; confetti.style.animationDuration = (Math.random() * 2 + 2) + 's'; container.appendChild(confetti); setTimeout(() => { confetti.remove(); }, 4000); } } // ============================ // Hero Effects // ============================ initHeroEffects() { const ctaButton = document.getElementById('ctaButton'); if (ctaButton) { ctaButton.addEventListener('click', () => { this.createButtonRipple(ctaButton); }); } } createButtonRipple(button) { const ripple = document.createElement('div'); ripple.style.position = 'absolute'; ripple.style.borderRadius = '50%'; ripple.style.background = 'rgba(255, 255, 255, 0.6)'; ripple.style.transform = 'scale(0)'; ripple.style.animation = 'ripple 0.6s linear'; ripple.style.left = '50%'; ripple.style.top = '50%'; ripple.style.width = '20px'; ripple.style.height = '20px'; ripple.style.marginLeft = '-10px'; ripple.style.marginTop = '-10px'; button.appendChild(ripple); setTimeout(() => { ripple.remove(); }, 600); } } // ============================ // Initialize App // ============================ new VitalBoostApp(); // ============================ // Additional CSS Animations (injected via JS) // ============================ const style = document.createElement('style'); style.textContent = @keyframes ripple { to { transform: scale(4); opacity: 0; } } @keyframes pulse { 0%, 100% { transform: scale(1); } 50% { transform: scale(1.1); } } ; document.head.appendChild(style);